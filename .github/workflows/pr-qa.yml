name: PR QA
on: 
  push:
    branches: [qa]
    paths:
      - "force-app/main/default/**"

  pull_request:
    branches: [qa]
    paths:
      - "force-app/main/default/**"
jobs:
  validation-with-code-coverage:
    name: Validation with Apex Code Coverage
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full

    env:
      SOURCE_BRANCH: ${{ github.head_ref }}
      TARGET_BRANCH: ${{ github.base_ref }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: QA Authorization
        run: |
          echo ${{ secrets.AUTHURL_QA}} | sf org login sfdx-url -d -u
      
      - name: Fetch Apex Class Names
        run: |
          find force-app/main/default/classes -name '*.cls' -type f | xargs -n 1 basename | sed 's/.cls//' | tee all-apex-class.txt
          find force-app/main/default/classes -name '*Test.cls' -type f | xargs -n 1 basename | sed 's/.cls//' | tee only-apex-test-class.txt
          chmod 777 all-apex-class.txt only-apex-test-class.txt

      - name: QA Validation
        run: |
          #!/bin/bash
          # Initialize an empty string to hold the test class names
          test_classes_string=""
          # Flag to track if any test class is missing
          missing_test_class=false
          
          echo "Missing Test Class = $missing_test_class"
          
          # Read the class names from all-apex-class.txt
          while IFS= read -r class || [ -n "$class" ]; do
              # Check if the class name already ends with 'Test'
              echo "Test Class String = $test_classes_string"
              if [[ "$class" == *Test ]]; then
                  # Directly append the test class name to the string
                  test_classes_string+="${class} "
              else
                  # Construct the expected test class name
                  test_class="${class}Test"
                  # Check if the test class exists in only-apex-test-class.txt
                  if grep -q "^${test_class}$" only-apex-test-class.txt; then
                      # Append the test class name to the string
                      test_classes_string+="${test_class} "
                  else
                      echo "Error: Test class for ${class} is missing."
                      missing_test_class=true
                  fi             
              fi
              echo "Test Class String = $test_classes_string"
          done < all-apex-class.txt
          echo "Missing Test Class = $missing_test_class"
          echo $test_classes_string
          # # Trim any trailing space from the string
          # test_classes_string=$(echo "$test_classes_string" | sed 's/ $//')
          # # Remove duplicate test class names
          # test_classes_string=$(echo "$test_classes_string" | awk '{for(i=1;i<=NF;i++) if(!seen[$i]++) printf "%s ", $i; print ""}')
          # # Output the string of test class names
          # # If any test class was missing, exit with an error
          # if [ "$missing_test_class" = true ]; then
          #     exit 1
          # else
          #     echo "Test classes found: $test_classes_string"
          # fi
          # if [ "$test_classes_string" = "" ]; then
          #   sf project deploy start -d force-app/main/default -o test-aqzkekn5j4iv@example.com --verbose -w 30 --ignore-conflicts
          # else
          #   sf project deploy start -d force-app/main/default -l RunSpecifiedTests -t $test_classes_string -o test-aqzkekn5j4iv@example.com --verbose -w 30 --ignore-conflicts
          # fi
          # echo "QA Validation is Successful"

  salesforce-code-analyzer-v4:
    name: SCA v4
    needs: validation-with-code-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli@latest

      - name: Install Salesforce Code Analyzer v4.x CLI Plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest

      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --engine pmd,eslint --normalize-severity --target force-app/main/default --outfile results.html
          results-artifact-name: salesforce-code-analyzer1-results

      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1
  
  salesforce-code-analyzer-v5:
    needs: validation-with-code-coverage
    name: SCA v5
    runs-on: ubuntu-latest
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli@latest

      - name: Install Salesforce Code Analyzer v5.x CLI Plugin
        run: sf plugins install code-analyzer@latest

      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v2
        with:
          run-arguments: --workspace force-app/main/default --view detail --output-file sfca_results.html --output-file sfca_results.json
          results-artifact-name: salesforce-code-analyzer2-results

      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-sev2-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1