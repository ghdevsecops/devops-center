name: PR QA
on: 
  push:
    branches: [qa]
    paths:
      - "force-app/main/default/**"

  pull_request:
    branches: [qa]
    paths:
      - "force-app/main/default/**"
env:
  SOURCE_BRANCH: ${{ github.head_ref }}
  TARGET_BRANCH: ${{ github.base_ref }}
jobs:
  validation-with-code-coverage:
    name: Validation with Apex Code Coverage
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    container:
      image: salesforce/cli:latest-full

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: QA Authorization
        run: |
          echo ${{ secrets.AUTHURL_QA}} | sf org login sfdx-url -d -u
      
      - name: Fetch Apex Class Names
        run: |
          echo "y" | sf plugins install sfdx-git-delta@5.0.0
          sf sgd source delta --from "origin/$TARGET_BRANCH" --to "origin/$SOURCE_BRANCH" --generate-delta
          find output/force-app/main/default/classes -name '*.cls' -type f | xargs -n 1 basename | sed 's/.cls//' > tee all-apex-class.txt
          find output/force-app/main/default/classes -name '*.trigger' -type f | xargs -n 1 basename | sed 's/.trigger//' >> tee all-apex-class.txt
          cat all-apex-class.txt
          find force-app/main/default/classes -name '*Test.cls' -type f | xargs -n 1 basename | sed 's/.cls//' > only-apex-test-class.txt
          cat only-apex-test-class.txt
          chmod 777 all-apex-class.txt only-apex-test-class.txt

      - name: QA Validation
        shell: bash
        run: |
          echo "QA Validation Start"
          
          #!/bin/bash
          test_classes_string=""
          missing_test_class=false
          while IFS= read -r class || [ -n "$class" ]; do
              if [[ "$class" == *Test ]]; then
                  test_classes_string+="${class} "
              else
                  test_class="${class}Test"
                  if grep -q "^${test_class}$" only-apex-test-class.txt; then
                      test_classes_string+="${test_class} "
                  else
                      echo "Error: Test class for ${class} is missing."
                      missing_test_class=true
                  fi             
              fi
          done < all-apex-class.txt


         
          test_classes_string=$(echo "$test_classes_string" | sed 's/ $//')
          test_classes_string=$(echo "$test_classes_string" | awk '{for(i=1;i<=NF;i++) if(!seen[$i]++) printf "%s ", $i; print ""}')
          if [ "$missing_test_class" = true ]; then
              exit 1
          else
              echo "Test classes found: $test_classes_string"
          fi

          

          if [ "$test_classes_string" = "" ]; then
            sf project deploy validate -x output/package/package.xml --post-destructive-changes output/destructiveChanges/destructiveChanges.xml -o test-aqzkekn5j4iv@example.com -w 30 
          else
            sf project deploy validate -x output/package/package.xml --post-destructive-changes output/destructiveChanges/destructiveChanges.xml -l RunSpecifiedTests -t $test_classes_string -o test-aqzkekn5j4iv@example.com -w 30
          fi
          echo "QA Validation is Successful"

  salesforce-code-analyzer-v4:
    name: SCA v4
    needs: validation-with-code-coverage
    runs-on: ubuntu-latest
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli@latest

      - name: Install Salesforce Code Analyzer v4.x CLI Plugin
        run: sf plugins install @salesforce/sfdx-scanner@latest

      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --engine pmd,eslint --normalize-severity --target force-app/main/default --outfile results.html
          results-artifact-name: salesforce-code-analyzer1-results

      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1
  
  salesforce-code-analyzer-v5:
    needs: validation-with-code-coverage
    name: SCA v5
    runs-on: ubuntu-latest
    steps:
      - name: Check out files
        uses: actions/checkout@v4

      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli@latest

      - name: Install Salesforce Code Analyzer v5.x CLI Plugin
        run: sf plugins install code-analyzer@latest

      - name: Run Salesforce Code Analyzer
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v2
        with:
          run-arguments: --workspace force-app/main/default --view detail --output-file sfca_results.html --output-file sfca_results.json
          results-artifact-name: salesforce-code-analyzer2-results

      - name: Check the outputs to determine whether to fail
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 ||
          steps.run-code-analyzer.outputs.num-sev2-violations > 0 ||
          steps.run-code-analyzer.outputs.num-violations > 10
        run: exit 1